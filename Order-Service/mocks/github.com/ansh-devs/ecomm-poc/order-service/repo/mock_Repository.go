// Code generated by mockery v2.42.0. DO NOT EDIT.

package repo

import (
	context "context"

	dto "github.com/ansh-devs/commercelens/order-service/dto"
	mock "github.com/stretchr/testify/mock"

	opentracing "github.com/opentracing/opentracing-go"
)

// MockRequesterVariadic is an autogenerated mock type for the Repository type
type MockRequesterVariadic struct {
	mock.Mock
}

type MockRequesterVariadic_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRequesterVariadic) EXPECT() *MockRequesterVariadic_Expecter {
	return &MockRequesterVariadic_Expecter{mock: &_m.Mock}
}

// CancelOrder provides a mock function with given fields: ctx, orderId, span
func (_m *MockRequesterVariadic) CancelOrder(ctx context.Context, orderId string, span opentracing.Span) (string, error) {
	ret := _m.Called(ctx, orderId, span)

	if len(ret) == 0 {
		panic("no return value specified for CancelOrder")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, opentracing.Span) (string, error)); ok {
		return rf(ctx, orderId, span)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, opentracing.Span) string); ok {
		r0 = rf(ctx, orderId, span)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, opentracing.Span) error); ok {
		r1 = rf(ctx, orderId, span)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRequesterVariadic_CancelOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelOrder'
type MockRequesterVariadic_CancelOrder_Call struct {
	*mock.Call
}

// CancelOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - orderId string
//   - span opentracing.Span
func (_e *MockRequesterVariadic_Expecter) CancelOrder(ctx interface{}, orderId interface{}, span interface{}) *MockRequesterVariadic_CancelOrder_Call {
	return &MockRequesterVariadic_CancelOrder_Call{Call: _e.mock.On("CancelOrder", ctx, orderId, span)}
}

func (_c *MockRequesterVariadic_CancelOrder_Call) Run(run func(ctx context.Context, orderId string, span opentracing.Span)) *MockRequesterVariadic_CancelOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(opentracing.Span))
	})
	return _c
}

func (_c *MockRequesterVariadic_CancelOrder_Call) Return(_a0 string, _a1 error) *MockRequesterVariadic_CancelOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRequesterVariadic_CancelOrder_Call) RunAndReturn(run func(context.Context, string, opentracing.Span) (string, error)) *MockRequesterVariadic_CancelOrder_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrder provides a mock function with given fields: ctx, orderId, span
func (_m *MockRequesterVariadic) GetOrder(ctx context.Context, orderId string, span opentracing.Span) (dto.Order, error) {
	ret := _m.Called(ctx, orderId, span)

	if len(ret) == 0 {
		panic("no return value specified for GetOrder")
	}

	var r0 dto.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, opentracing.Span) (dto.Order, error)); ok {
		return rf(ctx, orderId, span)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, opentracing.Span) dto.Order); ok {
		r0 = rf(ctx, orderId, span)
	} else {
		r0 = ret.Get(0).(dto.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, opentracing.Span) error); ok {
		r1 = rf(ctx, orderId, span)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRequesterVariadic_GetOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrder'
type MockRequesterVariadic_GetOrder_Call struct {
	*mock.Call
}

// GetOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - orderId string
//   - span opentracing.Span
func (_e *MockRequesterVariadic_Expecter) GetOrder(ctx interface{}, orderId interface{}, span interface{}) *MockRequesterVariadic_GetOrder_Call {
	return &MockRequesterVariadic_GetOrder_Call{Call: _e.mock.On("GetOrder", ctx, orderId, span)}
}

func (_c *MockRequesterVariadic_GetOrder_Call) Run(run func(ctx context.Context, orderId string, span opentracing.Span)) *MockRequesterVariadic_GetOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(opentracing.Span))
	})
	return _c
}

func (_c *MockRequesterVariadic_GetOrder_Call) Return(_a0 dto.Order, _a1 error) *MockRequesterVariadic_GetOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRequesterVariadic_GetOrder_Call) RunAndReturn(run func(context.Context, string, opentracing.Span) (dto.Order, error)) *MockRequesterVariadic_GetOrder_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserAllOrders provides a mock function with given fields: ctx, userId, span
func (_m *MockRequesterVariadic) GetUserAllOrders(ctx context.Context, userId string, span opentracing.Span) ([]dto.Order, error) {
	ret := _m.Called(ctx, userId, span)

	if len(ret) == 0 {
		panic("no return value specified for GetUserAllOrders")
	}

	var r0 []dto.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, opentracing.Span) ([]dto.Order, error)); ok {
		return rf(ctx, userId, span)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, opentracing.Span) []dto.Order); ok {
		r0 = rf(ctx, userId, span)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, opentracing.Span) error); ok {
		r1 = rf(ctx, userId, span)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRequesterVariadic_GetUserAllOrders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserAllOrders'
type MockRequesterVariadic_GetUserAllOrders_Call struct {
	*mock.Call
}

// GetUserAllOrders is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
//   - span opentracing.Span
func (_e *MockRequesterVariadic_Expecter) GetUserAllOrders(ctx interface{}, userId interface{}, span interface{}) *MockRequesterVariadic_GetUserAllOrders_Call {
	return &MockRequesterVariadic_GetUserAllOrders_Call{Call: _e.mock.On("GetUserAllOrders", ctx, userId, span)}
}

func (_c *MockRequesterVariadic_GetUserAllOrders_Call) Run(run func(ctx context.Context, userId string, span opentracing.Span)) *MockRequesterVariadic_GetUserAllOrders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(opentracing.Span))
	})
	return _c
}

func (_c *MockRequesterVariadic_GetUserAllOrders_Call) Return(_a0 []dto.Order, _a1 error) *MockRequesterVariadic_GetUserAllOrders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRequesterVariadic_GetUserAllOrders_Call) RunAndReturn(run func(context.Context, string, opentracing.Span) ([]dto.Order, error)) *MockRequesterVariadic_GetUserAllOrders_Call {
	_c.Call.Return(run)
	return _c
}

// PlaceOrder provides a mock function with given fields: ctx, product, userId, span
func (_m *MockRequesterVariadic) PlaceOrder(ctx context.Context, product dto.Product, userId dto.NatsUser, span opentracing.Span) (dto.Order, error) {
	ret := _m.Called(ctx, product, userId, span)

	if len(ret) == 0 {
		panic("no return value specified for PlaceOrder")
	}

	var r0 dto.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.Product, dto.NatsUser, opentracing.Span) (dto.Order, error)); ok {
		return rf(ctx, product, userId, span)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.Product, dto.NatsUser, opentracing.Span) dto.Order); ok {
		r0 = rf(ctx, product, userId, span)
	} else {
		r0 = ret.Get(0).(dto.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.Product, dto.NatsUser, opentracing.Span) error); ok {
		r1 = rf(ctx, product, userId, span)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRequesterVariadic_PlaceOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PlaceOrder'
type MockRequesterVariadic_PlaceOrder_Call struct {
	*mock.Call
}

// PlaceOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - product dto.Product
//   - userId dto.NatsUser
//   - span opentracing.Span
func (_e *MockRequesterVariadic_Expecter) PlaceOrder(ctx interface{}, product interface{}, userId interface{}, span interface{}) *MockRequesterVariadic_PlaceOrder_Call {
	return &MockRequesterVariadic_PlaceOrder_Call{Call: _e.mock.On("PlaceOrder", ctx, product, userId, span)}
}

func (_c *MockRequesterVariadic_PlaceOrder_Call) Run(run func(ctx context.Context, product dto.Product, userId dto.NatsUser, span opentracing.Span)) *MockRequesterVariadic_PlaceOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.Product), args[2].(dto.NatsUser), args[3].(opentracing.Span))
	})
	return _c
}

func (_c *MockRequesterVariadic_PlaceOrder_Call) Return(_a0 dto.Order, _a1 error) *MockRequesterVariadic_PlaceOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRequesterVariadic_PlaceOrder_Call) RunAndReturn(run func(context.Context, dto.Product, dto.NatsUser, opentracing.Span) (dto.Order, error)) *MockRequesterVariadic_PlaceOrder_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRequesterVariadic creates a new instance of MockRequesterVariadic. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRequesterVariadic(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRequesterVariadic {
	mock := &MockRequesterVariadic{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
