// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.sql

package db

import (
	"context"
)

const changeOrderStatusById = `-- name: ChangeOrderStatusById :exec
UPDATE orders SET status = $2
WHERE id = $1
`

type ChangeOrderStatusByIdParams struct {
	ID     string `json:"id"`
	Status string `json:"status"`
}

func (q *Queries) ChangeOrderStatusById(ctx context.Context, arg ChangeOrderStatusByIdParams) error {
	_, err := q.db.Exec(ctx, changeOrderStatusById, arg.ID, arg.Status)
	return err
}

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
  id, product_id, user_id, total_cost, status, fullname, address, product_name, description, price, created_at
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
)
RETURNING id, product_id, user_id, total_cost, status, fullname, address, product_name, description, price, created_at
`

type CreateOrderParams struct {
	ID          string      `json:"id"`
	ProductID   string      `json:"product_id"`
	UserID      string      `json:"user_id"`
	TotalCost   string      `json:"total_cost"`
	Status      string      `json:"status"`
	Fullname    string      `json:"fullname"`
	Address     string      `json:"address"`
	ProductName string      `json:"product_name"`
	Description string      `json:"description"`
	Price       string      `json:"price"`
	CreatedAt   interface{} `json:"created_at"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.ID,
		arg.ProductID,
		arg.UserID,
		arg.TotalCost,
		arg.Status,
		arg.Fullname,
		arg.Address,
		arg.ProductName,
		arg.Description,
		arg.Price,
		arg.CreatedAt,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.UserID,
		&i.TotalCost,
		&i.Status,
		&i.Fullname,
		&i.Address,
		&i.ProductName,
		&i.Description,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}

const getAllOrdersByUserId = `-- name: GetAllOrdersByUserId :many
SELECT id, product_id, user_id, total_cost, status, fullname, address, product_name, description, price, created_at FROM orders
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAllOrdersByUserId(ctx context.Context, id string) ([]Order, error) {
	rows, err := q.db.Query(ctx, getAllOrdersByUserId, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.UserID,
			&i.TotalCost,
			&i.Status,
			&i.Fullname,
			&i.Address,
			&i.ProductName,
			&i.Description,
			&i.Price,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderById = `-- name: GetOrderById :one
SELECT id, product_id, user_id, total_cost, status, fullname, address, product_name, description, price, created_at FROM orders
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOrderById(ctx context.Context, id string) (Order, error) {
	row := q.db.QueryRow(ctx, getOrderById, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.UserID,
		&i.TotalCost,
		&i.Status,
		&i.Fullname,
		&i.Address,
		&i.ProductName,
		&i.Description,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}
