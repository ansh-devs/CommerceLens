// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.sql

package db

import (
	"context"
)

const checkUserByEmail = `-- name: CheckUserByEmail :one
SELECT id, email, fullname, password, address, created_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) CheckUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, checkUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Fullname,
		&i.Password,
		&i.Address,
		&i.CreatedAt,
	)
	return i, err
}

const checkUserById = `-- name: CheckUserById :one
SELECT id, email, fullname, password, address, created_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) CheckUserById(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRow(ctx, checkUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Fullname,
		&i.Password,
		&i.Address,
		&i.CreatedAt,
	)
	return i, err
}

const checkUserIsRegistered = `-- name: CheckUserIsRegistered :one
SELECT count(*) FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) CheckUserIsRegistered(ctx context.Context, email string) (int64, error) {
	row := q.db.QueryRow(ctx, checkUserIsRegistered, email)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  id, fullname,email,password,address,created_at
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, email, fullname, password, address, created_at
`

type CreateUserParams struct {
	ID        string      `json:"id"`
	Fullname  string      `json:"fullname"`
	Email     string      `json:"email"`
	Password  string      `json:"password"`
	Address   string      `json:"address"`
	CreatedAt interface{} `json:"created_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Fullname,
		arg.Email,
		arg.Password,
		arg.Address,
		arg.CreatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Fullname,
		&i.Password,
		&i.Address,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, email, fullname, password, address, created_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Fullname,
		&i.Password,
		&i.Address,
		&i.CreatedAt,
	)
	return i, err
}
