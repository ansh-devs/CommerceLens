// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.sql

package db

import (
	"context"
)

const checkUserByEmail = `-- name: CheckUserByEmail :one
SELECT id, email, fullname, password, address, created_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) CheckUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, checkUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Fullname,
		&i.Password,
		&i.Address,
		&i.CreatedAt,
	)
	return i, err
}

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
  id, product_name,description,price,created_at
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, product_name, description, price, created_at
`

type CreateProductParams struct {
	ID          string      `json:"id"`
	ProductName string      `json:"product_name"`
	Description string      `json:"description"`
	Price       string      `json:"price"`
	CreatedAt   interface{} `json:"created_at"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.ID,
		arg.ProductName,
		arg.Description,
		arg.Price,
		arg.CreatedAt,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.ProductName,
		&i.Description,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}

const getAllProducts = `-- name: GetAllProducts :many
SELECT id, product_name, description, price, created_at FROM products
`

func (q *Queries) GetAllProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.Query(ctx, getAllProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.ProductName,
			&i.Description,
			&i.Price,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductById = `-- name: GetProductById :one
SELECT id, product_name, description, price, created_at FROM products
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProductById(ctx context.Context, id string) (Product, error) {
	row := q.db.QueryRow(ctx, getProductById, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.ProductName,
		&i.Description,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}
