// Code generated by mockery v2.42.0. DO NOT EDIT.

package repo

import (
	context "context"

	db "github.com/ansh-devs/ecomm-poc/product-service/db/generated"
	mock "github.com/stretchr/testify/mock"

	opentracing "github.com/opentracing/opentracing-go"
)

// MockRequesterVariadic is an autogenerated mock type for the Repository type
type MockRequesterVariadic struct {
	mock.Mock
}

type MockRequesterVariadic_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRequesterVariadic) EXPECT() *MockRequesterVariadic_Expecter {
	return &MockRequesterVariadic_Expecter{mock: &_m.Mock}
}

// GetAllProducts provides a mock function with given fields: ctx, span
func (_m *MockRequesterVariadic) GetAllProducts(ctx context.Context, span opentracing.Span) ([]db.Product, error) {
	ret := _m.Called(ctx, span)

	if len(ret) == 0 {
		panic("no return value specified for GetAllProducts")
	}

	var r0 []db.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, opentracing.Span) ([]db.Product, error)); ok {
		return rf(ctx, span)
	}
	if rf, ok := ret.Get(0).(func(context.Context, opentracing.Span) []db.Product); ok {
		r0 = rf(ctx, span)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, opentracing.Span) error); ok {
		r1 = rf(ctx, span)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRequesterVariadic_GetAllProducts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllProducts'
type MockRequesterVariadic_GetAllProducts_Call struct {
	*mock.Call
}

// GetAllProducts is a helper method to define mock.On call
//   - ctx context.Context
//   - span opentracing.Span
func (_e *MockRequesterVariadic_Expecter) GetAllProducts(ctx interface{}, span interface{}) *MockRequesterVariadic_GetAllProducts_Call {
	return &MockRequesterVariadic_GetAllProducts_Call{Call: _e.mock.On("GetAllProducts", ctx, span)}
}

func (_c *MockRequesterVariadic_GetAllProducts_Call) Run(run func(ctx context.Context, span opentracing.Span)) *MockRequesterVariadic_GetAllProducts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(opentracing.Span))
	})
	return _c
}

func (_c *MockRequesterVariadic_GetAllProducts_Call) Return(_a0 []db.Product, _a1 error) *MockRequesterVariadic_GetAllProducts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRequesterVariadic_GetAllProducts_Call) RunAndReturn(run func(context.Context, opentracing.Span) ([]db.Product, error)) *MockRequesterVariadic_GetAllProducts_Call {
	_c.Call.Return(run)
	return _c
}

// GetProductByID provides a mock function with given fields: ctx, prodID, span
func (_m *MockRequesterVariadic) GetProductByID(ctx context.Context, prodID string, span opentracing.Span) (db.Product, error) {
	ret := _m.Called(ctx, prodID, span)

	if len(ret) == 0 {
		panic("no return value specified for GetProductByID")
	}

	var r0 db.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, opentracing.Span) (db.Product, error)); ok {
		return rf(ctx, prodID, span)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, opentracing.Span) db.Product); ok {
		r0 = rf(ctx, prodID, span)
	} else {
		r0 = ret.Get(0).(db.Product)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, opentracing.Span) error); ok {
		r1 = rf(ctx, prodID, span)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRequesterVariadic_GetProductByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProductByID'
type MockRequesterVariadic_GetProductByID_Call struct {
	*mock.Call
}

// GetProductByID is a helper method to define mock.On call
//   - ctx context.Context
//   - prodID string
//   - span opentracing.Span
func (_e *MockRequesterVariadic_Expecter) GetProductByID(ctx interface{}, prodID interface{}, span interface{}) *MockRequesterVariadic_GetProductByID_Call {
	return &MockRequesterVariadic_GetProductByID_Call{Call: _e.mock.On("GetProductByID", ctx, prodID, span)}
}

func (_c *MockRequesterVariadic_GetProductByID_Call) Run(run func(ctx context.Context, prodID string, span opentracing.Span)) *MockRequesterVariadic_GetProductByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(opentracing.Span))
	})
	return _c
}

func (_c *MockRequesterVariadic_GetProductByID_Call) Return(_a0 db.Product, _a1 error) *MockRequesterVariadic_GetProductByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRequesterVariadic_GetProductByID_Call) RunAndReturn(run func(context.Context, string, opentracing.Span) (db.Product, error)) *MockRequesterVariadic_GetProductByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRequesterVariadic creates a new instance of MockRequesterVariadic. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRequesterVariadic(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRequesterVariadic {
	mock := &MockRequesterVariadic{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
